"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applyDecs2305;
<<<<<<< HEAD
var _checkInRHS = require("checkInRHS");
function _bindPropCall(obj, name) {
  return function (_this, value) {
    return obj[name].call(_this, value);
  };
}
function createAddInitializerMethod(initializers, decoratorFinishedRef) {
  return function addInitializer(initializer) {
    if (decoratorFinishedRef.v) {
      throw new Error("attempted to call addInitializer after decoration was finished");
    }
    assertCallable(initializer, "An initializer", true);
    initializers.push(initializer);
  };
}
function memberDec(dec, thisArg, name, desc, initializers, kind, isStatic, isPrivate, value, hasPrivateBrand, metadata) {
  function assertInstanceIfPrivate(callback) {
    return function (target, value) {
      if (!hasPrivateBrand(target)) {
        throw new TypeError("Attempted to access private element on non-instance");
      }
      return callback(target, value);
    };
  }
  var decoratorFinishedRef = {
    v: false
  };
  var ctx = {
    kind: ["field", "accessor", "method", "getter", "setter", "field"][kind],
    name: isPrivate ? "#" + name : name,
    static: isStatic,
    private: isPrivate,
    metadata: metadata,
    addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef)
  };
  var get, set;
  if (!isPrivate && (kind === 0 || kind === 2)) {
    get = function (target) {
      return target[name];
=======
var _checkInRHS = require("./checkInRHS.js");
var _setFunctionName = require("./setFunctionName.js");
var _toPropertyKey = require("./toPropertyKey.js");
function applyDecs2305(targetClass, memberDecs, classDecs, classDecsHaveThis, instanceBrand, parentClass) {
  function _bindPropCall(obj, name, before) {
    return function (_this, value) {
      if (before) {
        before(_this);
      }
      return obj[name].call(_this, value);
>>>>>>> jodaj
    };
  }
  function runInitializers(initializers, value) {
    for (var i = 0; i < initializers.length; i++) {
      initializers[i].call(value);
    }
<<<<<<< HEAD
  } else if (kind === 2) {
    get = assertInstanceIfPrivate(function () {
      return desc.value;
    });
  } else {
    var t = kind === 0 || kind === 1;
    if (t || kind === 3) {
      get = _bindPropCall(desc, "get");
      if (isPrivate) {
        get = assertInstanceIfPrivate(get);
      }
    }
    if (t || kind === 4) {
      set = _bindPropCall(desc, "set");
      if (isPrivate) {
        set = assertInstanceIfPrivate(set);
      }
    }
  }
  var has = isPrivate ? hasPrivateBrand.bind() : function (target) {
    return name in target;
  };
  var access = ctx.access = {
    has: has
  };
  if (get) access.get = get;
  if (set) access.set = set;
  try {
    return dec.call(thisArg, value, ctx);
  } finally {
    decoratorFinishedRef.v = true;
  }
}
function assertCallable(fn, hint, throwUndefined) {
  if (typeof fn !== "function") {
    if (throwUndefined || fn !== void 0) {
      throw new TypeError(hint + " must be a function");
    }
  }
}
function assertValidReturnValue(kind, value) {
  var type = typeof value;
  if (kind === 1) {
    if (type !== "object" || !value) {
      throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
    }
    assertCallable(value.get, "accessor.get");
    assertCallable(value.set, "accessor.set");
    assertCallable(value.init, "accessor.init");
  } else if (type !== "function") {
    throw new TypeError((kind === 0 ? "field" : kind === 5 ? "class" : "method") + " decorators must return a function or void 0");
  }
}
function applyMemberDec(ret, base, decInfo, decoratorsHaveThis, name, kind, isStatic, isPrivate, initializers, hasPrivateBrand, metadata) {
  var decs = decInfo[0],
    decVal = decInfo[3];
  if (!decoratorsHaveThis && !Array.isArray(decs)) {
    decs = [decs];
  }
  var desc, init, value;
  if (isPrivate) {
    if (kind === 0 || kind === 1) {
      desc = {
        get: function () {
          return decVal(this);
        },
        set: function (value) {
          decInfo[4](this, value);
        }
      };
    } else {
      if (kind === 3) {
        desc = {
          get: decVal
        };
      } else if (kind === 4) {
        desc = {
          set: decVal
        };
      } else {
        desc = {
          value: decVal
        };
      }
    }
  } else if (kind !== 0) {
    desc = Object.getOwnPropertyDescriptor(base, name);
  }
  if (kind === 1) {
    value = {
      get: desc.get,
      set: desc.set
    };
  } else if (kind === 2) {
    value = desc.value;
  } else if (kind === 3) {
    value = desc.get;
  } else if (kind === 4) {
    value = desc.set;
  }
  var newValue, get, set;
  var inc = decoratorsHaveThis ? 2 : 1;
  for (var i = decs.length - 1; i >= 0; i -= inc) {
    var dec = decs[i];
    newValue = memberDec(dec, decoratorsHaveThis ? decs[i - 1] : undefined, name, desc, initializers, kind, isStatic, isPrivate, value, hasPrivateBrand, metadata);
    if (newValue !== void 0) {
      assertValidReturnValue(kind, newValue);
      var newInit;
      if (kind === 0) {
        newInit = newValue;
      } else if (kind === 1) {
        newInit = newValue.init;
        get = newValue.get || value.get;
        set = newValue.set || value.set;
        value = {
          get: get,
          set: set
        };
      } else {
        value = newValue;
      }
      if (newInit !== void 0) {
        if (init === void 0) {
          init = newInit;
        } else if (typeof init === "function") {
          init = [init, newInit];
=======
    return value;
  }
  function assertCallable(fn, hint1, hint2, throwUndefined) {
    if (typeof fn !== "function") {
      if (throwUndefined || fn !== void 0) {
        throw new TypeError(hint1 + " must " + (hint2 || "be") + " a function" + (throwUndefined ? "" : " or undefined"));
      }
    }
    return fn;
  }
  function applyDec(Class, decInfo, decoratorsHaveThis, name, kind, metadata, initializers, ret, isStatic, isPrivate, isField, isAccessor, hasPrivateBrand) {
    function assertInstanceIfPrivate(target) {
      if (!hasPrivateBrand(target)) {
        throw new TypeError("Attempted to access private element on non-instance");
      }
    }
    var decs = decInfo[0],
      decVal = decInfo[3],
      _,
      isClass = !ret;
    if (!isClass) {
      if (!decoratorsHaveThis && !Array.isArray(decs)) {
        decs = [decs];
      }
      var desc = {},
        init = [],
        key = kind === 3 ? "get" : kind === 4 || isAccessor ? "set" : "value";
      if (isPrivate) {
        if (isField || isAccessor) {
          desc = {
            get: (0, _setFunctionName.default)(function () {
              return decVal(this);
            }, name, "get"),
            set: function (value) {
              decInfo[4](this, value);
            }
          };
>>>>>>> jodaj
        } else {
          desc[key] = decVal;
        }
        if (!isField) {
          (0, _setFunctionName.default)(desc[key], name, kind === 2 ? "" : key);
        }
<<<<<<< HEAD
        return value;
      };
    } else {
      var originalInitializer = init;
      init = init.call.bind(originalInitializer);
    }
    ret.push(init);
  }
  if (kind !== 0) {
    if (kind === 1) {
      desc.get = value.get;
      desc.set = value.set;
    } else if (kind === 2) {
      desc.value = value;
    } else if (kind === 3) {
      desc.get = value;
    } else if (kind === 4) {
      desc.set = value;
    }
    if (isPrivate) {
      if (kind === 1) {
        ret.push(_bindPropCall(desc, "get"), _bindPropCall(desc, "set"));
      } else {
        ret.push(kind === 2 ? value : Function.call.bind(value));
      }
    } else {
      Object.defineProperty(base, name, desc);
    }
  }
}
function applyMemberDecs(Class, decInfos, instanceBrand, metadata) {
  var ret = [];
  var protoInitializers;
  var staticInitializers;
  var staticBrand;
  var existingProtoNonFields = new Map();
  var existingStaticNonFields = new Map();
  function pushInitializers(initializers) {
    if (initializers) {
      ret.push(function (instance) {
        for (var i = 0; i < initializers.length; i++) {
          initializers[i].call(instance);
        }
        return instance;
      });
    }
  }
  for (var i = 0; i < decInfos.length; i++) {
    var decInfo = decInfos[i];
    if (!Array.isArray(decInfo)) continue;
    var kind = decInfo[1];
    var name = decInfo[2];
    var isPrivate = decInfo.length > 3;
    var decoratorsHaveThis = kind & 16;
    var isStatic = !!(kind & 8);
    var base;
    var initializers;
    var hasPrivateBrand = instanceBrand;
    kind &= 7;
    if (isStatic) {
      base = Class;
      staticInitializers = staticInitializers || [];
      initializers = staticInitializers;
      if (isPrivate && !staticBrand) {
        staticBrand = function (_) {
          return _checkInRHS(_) === Class;
        };
      }
      hasPrivateBrand = staticBrand;
    } else {
      base = Class.prototype;
      protoInitializers = protoInitializers || [];
      initializers = protoInitializers;
    }
    if (kind !== 0 && !isPrivate) {
      var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
      var existingKind = existingNonFields.get(name) || 0;
      if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
        throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name);
      }
      existingNonFields.set(name, !existingKind && kind > 2 ? kind : true);
    }
    applyMemberDec(ret, base, decInfo, decoratorsHaveThis, name, kind, isStatic, isPrivate, initializers, hasPrivateBrand, metadata);
  }
  pushInitializers(protoInitializers);
  pushInitializers(staticInitializers);
  return ret;
}
function applyClassDecs(targetClass, classDecs, decoratorsHaveThis, metadata) {
  if (classDecs.length) {
    var initializers = [];
    var newClass = targetClass;
    var name = targetClass.name;
    var inc = decoratorsHaveThis ? 2 : 1;
    for (var i = classDecs.length - 1; i >= 0; i -= inc) {
      var decoratorFinishedRef = {
        v: false
=======
      } else if (!isField) {
        desc = Object.getOwnPropertyDescriptor(Class, name);
      }
    }
    var newValue;
    for (var i = decs.length - 1; i >= 0; i -= decoratorsHaveThis ? 2 : 1) {
      var dec = decs[i],
        decThis = decoratorsHaveThis ? decs[i - 1] : void 0;
      var decoratorFinishedRef = {};
      var ctx = {
        kind: ["field", "accessor", "method", "getter", "setter", "field", "class"][kind],
        name: name,
        metadata: metadata,
        addInitializer: function (decoratorFinishedRef, initializer) {
          if (decoratorFinishedRef.v) {
            throw new Error("attempted to call addInitializer after decoration was finished");
          }
          assertCallable(initializer, "An initializer", "be", true);
          initializers.push(initializer);
        }.bind(null, decoratorFinishedRef)
>>>>>>> jodaj
      };
      try {
        if (isClass) {
          newValue = dec.call(decThis, Class, ctx);
        } else {
          ctx.static = isStatic;
          ctx.private = isPrivate;
          var get, set;
          if (!isPrivate && (isField || kind === 2)) {
            get = function (target) {
              return target[name];
            };
            if (isField) {
              set = function (target, v) {
                target[name] = v;
              };
            }
          } else if (kind === 2) {
            get = function (_this) {
              assertInstanceIfPrivate(_this);
              return desc.value;
            };
          } else {
            if (kind < 2 || kind === 3) {
              get = _bindPropCall(desc, "get", isPrivate && assertInstanceIfPrivate);
            }
            if (kind < 2 || kind === 4) {
              set = _bindPropCall(desc, "set", isPrivate && assertInstanceIfPrivate);
            }
          }
          var access = ctx.access = {
            has: isPrivate ? hasPrivateBrand.bind() : function (target) {
              return name in target;
            }
          };
          if (get) access.get = get;
          if (set) access.set = set;
          newValue = dec.call(decThis, isAccessor ? {
            get: desc.get,
            set: desc.set
          } : desc[key], ctx);
          if (isAccessor) {
            if (typeof newValue === "object" && newValue) {
              if (_ = assertCallable(newValue.get, "accessor.get")) {
                desc.get = _;
              }
              if (_ = assertCallable(newValue.set, "accessor.set")) {
                desc.set = _;
              }
              if (_ = assertCallable(newValue.init, "accessor.init")) {
                init.push(_);
              }
            } else if (newValue !== void 0) {
              throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
            }
          } else if (assertCallable(newValue, (isField ? "field" : "method") + " decorators", "return")) {
            if (isField) {
              init.push(newValue);
            } else {
              desc[key] = newValue;
            }
          }
        }
      } finally {
        decoratorFinishedRef.v = true;
      }
    }
    if (isField || isAccessor) {
      ret.push(function (instance, value) {
        for (var i = init.length - 1; i >= 0; i--) {
          value = init[i].call(instance, value);
        }
        return value;
      });
    }
    if (!isField && !isClass) {
      if (isPrivate) {
        if (isAccessor) {
          ret.push(_bindPropCall(desc, "get"), _bindPropCall(desc, "set"));
        } else {
          ret.push(kind === 2 ? desc[key] : _bindPropCall.call.bind(desc[key]));
        }
      } else {
        Object.defineProperty(Class, name, desc);
      }
    }
    return newValue;
  }
  function applyMemberDecs(Class, decInfos, instanceBrand, metadata) {
    var ret = [];
    var protoInitializers;
    var staticInitializers;
    var staticBrand = function (_) {
      return (0, _checkInRHS.default)(_) === Class;
    };
    var existingNonFields = new Map();
    function pushInitializers(initializers) {
      if (initializers) {
        ret.push(runInitializers.bind(null, initializers));
      }
    }
    for (var i = 0; i < decInfos.length; i++) {
      var decInfo = decInfos[i];
      if (!Array.isArray(decInfo)) continue;
      var kind = decInfo[1];
      var name = decInfo[2];
      var isPrivate = decInfo.length > 3;
      var decoratorsHaveThis = kind & 16;
      var isStatic = !!(kind & 8);
      kind &= 7;
      var isField = kind === 0;
      var key = name + "/" + isStatic;
      if (!isField && !isPrivate) {
        var existingKind = existingNonFields.get(key);
        if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
          throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name);
        }
        existingNonFields.set(key, kind > 2 ? kind : true);
      }
      applyDec(isStatic ? Class : Class.prototype, decInfo, decoratorsHaveThis, isPrivate ? "#" + name : (0, _toPropertyKey.default)(name), kind, metadata, isStatic ? staticInitializers = staticInitializers || [] : protoInitializers = protoInitializers || [], ret, isStatic, isPrivate, isField, kind === 1, isStatic && isPrivate ? staticBrand : instanceBrand);
    }
    pushInitializers(protoInitializers);
    pushInitializers(staticInitializers);
    return ret;
  }
  function defineMetadata(Class, metadata) {
    return Object.defineProperty(Class, Symbol.metadata || Symbol.for("Symbol.metadata"), {
      configurable: true,
      enumerable: true,
      value: metadata
    });
  }
  if (arguments.length >= 6) {
    var parentMetadata = parentClass[Symbol.metadata || Symbol.for("Symbol.metadata")];
  }
  var metadata = Object.create(parentMetadata == null ? null : parentMetadata);
  var e = applyMemberDecs(targetClass, memberDecs, instanceBrand, metadata);
  if (!classDecs.length) defineMetadata(targetClass, metadata);
  return {
    e: e,
    get c() {
      var initializers = [];
      return classDecs.length && [defineMetadata(assertCallable(applyDec(targetClass, [classDecs], classDecsHaveThis, targetClass.name, 5, metadata, initializers), "class decorators", "return") || targetClass, metadata), runInitializers.bind(null, initializers, targetClass)];
    }
  };
}

//# sourceMappingURL=applyDecs2305.js.map
